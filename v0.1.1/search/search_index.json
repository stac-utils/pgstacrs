{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"pgstacrs","text":"<p>Python async API for pgstac, backed by Rust. pgstacrs is tested against the following pgstac versions:</p> <ul> <li>0.9.1</li> <li>0.8.5</li> </ul>"},{"location":"#usage","title":"Usage","text":"<pre><code>python -m pip install pgstacrs\n</code></pre> <p>Then:</p> <pre><code>from pgstacrs import Client\n\n# Search\nclient = await Client.open(\"postgresql://username:password@localhost:5432/pgstac\")\nfeature_collection = await client.search(\n    collections=[\"collection-a\"], # or collections=\"collection-a\"\n    intersects={\"type\": \"Point\", \"coordinates\": [-105.1019, 40.1672]},\n    sortby=\"-datetime\",\n)\n\n# CRUD\nawait client.create_item({\"type\": \"Feature\", \"id\": \"foo\", ...})\nawait client.delete_item(\"foo\")\nawait client.create_items([...])\n</code></pre> <p>See the documentation for more.</p>"},{"location":"#developing","title":"Developing","text":"<p>Get Rust and uv. Then:</p> <pre><code>git clone git@github.com:stac-utils/pgstacrs.git\ncd pgstacrs\nuv sync\nscripts/test\n</code></pre>"},{"location":"#license","title":"License","text":"<p>MIT</p>"},{"location":"api/","title":"API","text":""},{"location":"api/#pgstacrs.Client","title":"pgstacrs.Client","text":"<p>A pgstac client.</p>"},{"location":"api/#pgstacrs.Client.open","title":"open  <code>async</code> <code>classmethod</code>","text":"<pre><code>open(params: str) -&gt; Client\n</code></pre> <p>Opens a new client, backed by a connection pool.</p> <p>Parameters:</p> <ul> <li> <code>params</code>               (<code>str</code>)           \u2013            <p>The connection parameters, either in <code>postgresql://</code> or <code>host=localhost user=username</code> format.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Client</code>           \u2013            <p>A pgstac client</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from pgstacrs import Client\n&gt;&gt;&gt; client = await Client.open(\"postgresql://username:password@localhost:5432/pgstac\")\n&gt;&gt;&gt; client = await Client.open(\"user=username password=password dbname=pgstac\")\n</code></pre>"},{"location":"api/#pgstacrs.Client.search","title":"search  <code>async</code>","text":"<pre><code>search(\n    *,\n    intersects: str | dict[str, Any] | None = None,\n    ids: str | list[str] | None = None,\n    collections: str | list[str] | None = None,\n    limit: int | None = None,\n    bbox: list[float] | None = None,\n    datetime: str | None = None,\n    include: str | list[str] | None = None,\n    exclude: str | list[str] | None = None,\n    sortby: str | list[str] | None = None,\n    filter: str | dict[str, Any] | None = None,\n    query: dict[str, Any] | None = None,\n    **kwargs: str,\n) -&gt; dict[str, Any]\n</code></pre> <p>Searches the database with STAC API item search.</p> <p>Parameters:</p> <ul> <li> <code>collections</code>               (<code>str | list[str] | None</code>, default:                   <code>None</code> )           \u2013            <p>Array of one or more Collection IDs that each matching Item must be in.</p> </li> <li> <code>ids</code>               (<code>str | list[str] | None</code>, default:                   <code>None</code> )           \u2013            <p>Array of Item ids to return.</p> </li> <li> <code>intersects</code>               (<code>str | dict[str, Any] | None</code>, default:                   <code>None</code> )           \u2013            <p>Searches items by performing intersection between their geometry and provided GeoJSON geometry.</p> </li> <li> <code>bbox</code>               (<code>list[float] | None</code>, default:                   <code>None</code> )           \u2013            <p>Requested bounding box.</p> </li> <li> <code>datetime</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>Single date+time, or a range (<code>/</code> separator), formatted to RFC 3339, section 5.6.  Use double dots .. for open date ranges.</p> </li> <li> <code>include</code>               (<code>str | list[str] | None</code>, default:                   <code>None</code> )           \u2013            <p>Fields to include in the response (see the extension docs) for more on the semantics).</p> </li> <li> <code>exclude</code>               (<code>str | list[str] | None</code>, default:                   <code>None</code> )           \u2013            <p>Fields to exclude from the response (see the extension docs) for more on the semantics).</p> </li> <li> <code>sortby</code>               (<code>str | list[str] | None</code>, default:                   <code>None</code> )           \u2013            <p>Fields by which to sort results (use <code>-field</code> to sort descending).</p> </li> <li> <code>filter</code>               (<code>str | dict[str, Any] | None</code>, default:                   <code>None</code> )           \u2013            <p>CQL2 filter expression. Strings will be interpreted as cql2-text, dictionaries as cql2-json.</p> </li> <li> <code>query</code>               (<code>dict[str, Any] | None</code>, default:                   <code>None</code> )           \u2013            <p>Additional filtering based on properties. It is recommended to use filter instead, if possible.</p> </li> <li> <code>limit</code>               (<code>int | None</code>, default:                   <code>None</code> )           \u2013            <p>The page size returned from the server.</p> </li> <li> <code>kwargs</code>               (<code>str</code>, default:                   <code>{}</code> )           \u2013            <p>Any additional arguments to pass down into the search, e.g a pagination token</p> </li> </ul>"},{"location":"api/#pgstacrs.Client.print_config","title":"print_config  <code>async</code>","text":"<pre><code>print_config() -&gt; None\n</code></pre> <p>Prints the postgresql configuration.</p> <p>Redacts the password</p>"},{"location":"api/#pgstacrs.Client.set_setting","title":"set_setting  <code>async</code>","text":"<pre><code>set_setting(key: str, value: str) -&gt; None\n</code></pre> <p>Sets a pgstac setting.</p> <p>Parameters:</p> <ul> <li> <code>key</code>               (<code>str</code>)           \u2013            <p>The setting name, e.g. <code>base_url</code></p> </li> <li> <code>value</code>               (<code>str</code>)           \u2013            <p>The setting value, e.g. <code>http://pgstacrs.test</code></p> </li> </ul>"},{"location":"api/#pgstacrs.Client.get_version","title":"get_version  <code>async</code>","text":"<pre><code>get_version() -&gt; str\n</code></pre> <p>Returns the pgstac version.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The pgstac version as a string</p> </li> </ul>"},{"location":"api/#pgstacrs.Client.get_collection","title":"get_collection  <code>async</code>","text":"<pre><code>get_collection(id: str) -&gt; dict[str, Any] | None\n</code></pre> <p>Returns a collection by id, or none if one does not exist.</p> <p>Parameters:</p> <ul> <li> <code>id</code>               (<code>str</code>)           \u2013            <p>The collection id</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Any] | None</code>           \u2013            <p>A STAC collection, or None</p> </li> </ul>"},{"location":"api/#pgstacrs.Client.create_collection","title":"create_collection  <code>async</code>","text":"<pre><code>create_collection(collection: dict[str, Any]) -&gt; None\n</code></pre> <p>Creates a new collection.</p> <p>Parameters:</p> <ul> <li> <code>collection</code>               (<code>dict[str, Any]</code>)           \u2013            <p>The collection</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>PgstacError</code>             \u2013            <p>If the collection already exists.</p> </li> </ul>"},{"location":"api/#pgstacrs.Client.update_collection","title":"update_collection  <code>async</code>","text":"<pre><code>update_collection(collection: dict[str, Any]) -&gt; None\n</code></pre> <p>Updates a collection.</p> <p>Parameters:</p> <ul> <li> <code>collection</code>               (<code>dict[str, Any]</code>)           \u2013            <p>The collection</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>PgstacError</code>             \u2013            <p>If the collection does not exist.</p> </li> </ul>"},{"location":"api/#pgstacrs.Client.update_collection_extents","title":"update_collection_extents  <code>async</code>","text":"<pre><code>update_collection_extents() -&gt; None\n</code></pre> <p>Updates all collection extents.</p>"},{"location":"api/#pgstacrs.Client.upsert_collection","title":"upsert_collection  <code>async</code>","text":"<pre><code>upsert_collection(collection: dict[str, Any]) -&gt; None\n</code></pre> <p>Upserts a collection.</p> <p>Parameters:</p> <ul> <li> <code>collection</code>               (<code>dict[str, Any]</code>)           \u2013            <p>The collection</p> </li> </ul>"},{"location":"api/#pgstacrs.Client.delete_collection","title":"delete_collection  <code>async</code>","text":"<pre><code>delete_collection(id: str) -&gt; None\n</code></pre> <p>Deletes a collection by id.</p> <p>Parameters:</p> <ul> <li> <code>id</code>               (<code>str</code>)           \u2013            <p>The collection id</p> </li> </ul>"},{"location":"api/#pgstacrs.Client.all_collections","title":"all_collections  <code>async</code>","text":"<pre><code>all_collections() -&gt; list[dict[str, Any]]\n</code></pre> <p>Returns all collections.</p> <p>Returns:</p> <ul> <li> <code>list[dict[str, Any]]</code>           \u2013            <p>All collections in the database</p> </li> </ul>"},{"location":"api/#pgstacrs.Client.get_item","title":"get_item  <code>async</code>","text":"<pre><code>get_item(\n    id: str, collection_id: str | None = None\n) -&gt; dict[str, Any] | None\n</code></pre> <p>Returns an item by id.</p> <p>Parameters:</p> <ul> <li> <code>id</code>               (<code>str</code>)           \u2013            <p>The item id</p> </li> <li> <code>collection_id</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>The optional collection id</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Any] | None</code>           \u2013            <p>The item, or None if the item does not exist</p> </li> </ul>"},{"location":"api/#pgstacrs.Client.create_item","title":"create_item  <code>async</code>","text":"<pre><code>create_item(item: dict[str, Any]) -&gt; None\n</code></pre> <p>Creates an item.</p> <p>Parameters:</p> <ul> <li> <code>item</code>               (<code>dict[str, Any]</code>)           \u2013            <p>The item</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>PgstacError</code>             \u2013            <p>If the item's collection does not exist. The collection is determined by the <code>collection</code> attribute of the item.</p> </li> </ul>"},{"location":"api/#pgstacrs.Client.create_items","title":"create_items  <code>async</code>","text":"<pre><code>create_items(items: list[dict[str, Any]]) -&gt; None\n</code></pre> <p>Creates many items.</p> <p>Parameters:</p> <ul> <li> <code>items</code>               (<code>list[dict[str, Any]]</code>)           \u2013            <p>The items</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>PgstacError</code>             \u2013            <p>If the items' collection(s) does not exist.</p> </li> </ul>"},{"location":"api/#pgstacrs.Client.update_item","title":"update_item  <code>async</code>","text":"<pre><code>update_item(item: dict[str, Any]) -&gt; None\n</code></pre> <p>Updates an item.</p> <p>Parameters:</p> <ul> <li> <code>item</code>               (<code>dict[str, Any]</code>)           \u2013            <p>The item</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>PgstacError</code>             \u2013            <p>If the item does not exist</p> </li> </ul>"},{"location":"api/#pgstacrs.Client.upsert_item","title":"upsert_item  <code>async</code>","text":"<pre><code>upsert_item(item: dict[str, Any]) -&gt; None\n</code></pre> <p>Upserts an item.</p> <p>Parameters:</p> <ul> <li> <code>item</code>               (<code>dict[str, Any]</code>)           \u2013            <p>The item</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>PgstacError</code>             \u2013            <p>If the item's collection does not exist.</p> </li> </ul>"},{"location":"api/#pgstacrs.Client.upsert_items","title":"upsert_items  <code>async</code>","text":"<pre><code>upsert_items(items: list[dict[str, Any]]) -&gt; None\n</code></pre> <p>Upserts many items.</p> <p>Parameters:</p> <ul> <li> <code>items</code>               (<code>list[dict[str, Any]]</code>)           \u2013            <p>The items</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>PgstacError</code>             \u2013            <p>If the items' collection(s) does not exist.</p> </li> </ul>"},{"location":"api/#pgstacrs.Client.delete_item","title":"delete_item  <code>async</code>","text":"<pre><code>delete_item(\n    id: str, collection_id: str | None = None\n) -&gt; None\n</code></pre> <p>Deletes an item by id.</p> <p>Parameters:</p> <ul> <li> <code>id</code>               (<code>str</code>)           \u2013            <p>The item id</p> </li> <li> <code>collection_id</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>The optional collection id</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>PgstacError</code>             \u2013            <p>If the item cannot be found</p> </li> </ul>"},{"location":"api/#pgstacrs.StacError","title":"pgstacrs.StacError","text":"<p>Something doesn't match the STAC specification</p>"},{"location":"api/#pgstacrs.PgstacError","title":"pgstacrs.PgstacError","text":"<p>An exception returned from pgstac</p>"}]}